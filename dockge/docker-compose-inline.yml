version: '3.8'

services:
  # API Key Processor - handles base64 decoding for Filebeat
  api-key-processor:
    image: alpine:latest
    container_name: hospital-scraper-api-processor
    volumes:
      - api-key-data:/shared
    environment:
      - ELASTICSEARCH_API_KEY=${ELASTICSEARCH_API_KEY}
    command: |
      sh -c '
      echo "Processing API key for Filebeat..." &&
      DECODED_KEY=$$(echo "$${ELASTICSEARCH_API_KEY}" | base64 -d 2>/dev/null || echo "$${ELASTICSEARCH_API_KEY}") &&
      echo "$${DECODED_KEY}" > /shared/decoded_api_key &&
      echo "API key processed and saved" &&
      sleep 5
      '
    restart: "no"
    labels:
      - "com.dockge.name=API Key Processor"
      - "com.dockge.description=Processes base64 encoded API keys for Filebeat"

  # OTEL Collector for Traces and Metrics
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: hospital-scraper-otel
    command: ["--config=/etc/otel-collector-config.yaml"]
    configs:
      - source: otel-config
        target: /etc/otel-collector-config.yaml
    ports:
      - "${OTEL_GRPC_PORT:-4317}:4317"   # OTLP gRPC receiver
      - "${OTEL_HTTP_PORT:-4318}:4318"   # OTLP HTTP receiver  
      - "${METRICS_PORT:-8889}:8889"     # Prometheus metrics
    environment:
      - ELASTICSEARCH_CLOUD_URL=${ELASTICSEARCH_CLOUD_URL}
      - ELASTICSEARCH_API_KEY=${ELASTICSEARCH_API_KEY}
      - ELASTICSEARCH_APM_URL=${ELASTICSEARCH_APM_URL}
    restart: unless-stopped
    networks:
      - hospital-network
    labels:
      - "com.dockge.name=Hospital Scraper OTEL"
      - "com.dockge.description=OpenTelemetry Collector for metrics and traces"

  # Filebeat for Log Collection
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: hospital-scraper-filebeat
    user: root
    volumes:
      - api-key-data:/shared:ro
      - hospital-logs:/app/logs:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    configs:
      - source: filebeat-config-template
        target: /usr/share/filebeat/filebeat.yml.template
    environment:
      - ELASTICSEARCH_CLOUD_URL=${ELASTICSEARCH_CLOUD_URL}
    entrypoint: |
      sh -c '
      echo "Reading decoded API key..." &&
      DECODED_API_KEY=$$(cat /shared/decoded_api_key 2>/dev/null || echo "${ELASTICSEARCH_API_KEY}") &&
      echo "Substituting API key in config..." &&
      sed "s|DECODED_API_KEY_PLACEHOLDER|$${DECODED_API_KEY}|g" /usr/share/filebeat/filebeat.yml.template > /usr/share/filebeat/filebeat.yml &&
      echo "Starting Filebeat..." &&
      /usr/local/bin/docker-entrypoint -e
      '
    restart: unless-stopped
    depends_on:
      api-key-processor:
        condition: service_completed_successfully
      otel-collector:
        condition: service_started
    networks:
      - hospital-network
    labels:
      - "com.dockge.name=Hospital Scraper Filebeat"
      - "com.dockge.description=Log collection and forwarding to Elasticsearch"

  # Hospital Scraper Application
  hospital-scraper:
    image: ghcr.io/achyutjhunjhunwala/tug-klinikum:latest
    container_name: hospital-scraper-app
    ports:
      - "${APP_PORT:-3000}:3000"
    volumes:
      - hospital-logs:/app/logs
      - hospital-screenshots:/app/screenshots
    environment:
      - NODE_ENV=production
      - ELASTICSEARCH_CLOUD_URL=${ELASTICSEARCH_CLOUD_URL}
      - ELASTICSEARCH_API_KEY=${ELASTICSEARCH_API_KEY}
      - ELASTICSEARCH_APM_URL=${ELASTICSEARCH_APM_URL}
      - ELASTICSEARCH_INDEX=${ELASTICSEARCH_INDEX:-hospital-metrics}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=${OTEL_SERVICE_NAME:-hospital-scraper}
      - OTEL_SERVICE_VERSION=${OTEL_SERVICE_VERSION:-1.0.0}
      - OBSERVABILITY_PROVIDERS=elastic
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SCRAPING_INTERVAL=${SCRAPING_INTERVAL:-30}
      - SCRAPING_TIMEZONE=${SCRAPING_TIMEZONE:-Europe/Berlin}
      - ADULT_TARGET_URL=${ADULT_TARGET_URL:-https://www.vivantes.de/klinikum-im-friedrichshain/rettungsstelle}
      - CHILDREN_TARGET_URL=${CHILDREN_TARGET_URL:-https://www.vivantes.de/klinikum-im-friedrichshain/kinder-jugendmedizin/kinderrettungsstelle}
      - OTEL_TRACE_SAMPLING=${OTEL_TRACE_SAMPLING:-1.0}
      - OTEL_METRIC_INTERVAL=${OTEL_METRIC_INTERVAL:-30000}
      - PROXY_SERVER=${PROXY_SERVER:-}
      - PROXY_USERNAME=${PROXY_USERNAME:-}
      - PROXY_PASSWORD=${PROXY_PASSWORD:-}
    restart: unless-stopped
    depends_on:
      otel-collector:
        condition: service_started
      filebeat:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - hospital-network
    labels:
      - "com.dockge.name=Hospital Scraper App"
      - "com.dockge.description=Main application for scraping hospital data"
      - "com.dockge.url=http://localhost:${APP_PORT:-3000}/health"

  # Hospital UI API Server (serves both API and static frontend)
  hospital-ui:
    image: ghcr.io/achyutjhunjhunwala/tug-klinikum-ui:latest
    container_name: hospital-ui-server
    ports:
      - "${API_PORT:-4000}:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - USE_HTTPS=${USE_HTTPS:-false}
      - ELASTICSEARCH_CLOUD_URL=${ELASTICSEARCH_CLOUD_URL}
      - ELASTICSEARCH_API_KEY=${ELASTICSEARCH_API_KEY}
      - ELASTICSEARCH_INDEX=${ELASTICSEARCH_INDEX:-hospital-metrics}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-60000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-20}
      - RATE_LIMIT_SKIP_SUCCESSFUL=${RATE_LIMIT_SKIP_SUCCESSFUL:-false}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3001,http://localhost:3000}
      - API_TIMEOUT_MS=${API_TIMEOUT_MS:-30000}
      - MAX_REQUEST_SIZE=${MAX_REQUEST_SIZE:-1mb}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    restart: unless-stopped
    depends_on:
      otel-collector:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - hospital-network
    labels:
      - "com.dockge.name=Hospital UI Server"
      - "com.dockge.description=Web UI and API for hospital wait times"
      - "com.dockge.url=http://localhost:${API_PORT:-4000}"

configs:
  otel-config:
    content: |
      receivers:
        otlp:
          protocols:
            grpc:
              endpoint: 0.0.0.0:4317
            http:
              endpoint: 0.0.0.0:4318

      processors:
        memory_limiter:
          check_interval: 1s
          limit_mib: 512

        resource:
          attributes:
            - key: service.name
              from_attribute: service.name
              action: upsert
            - key: service.version
              from_attribute: service.version
              action: upsert
            - key: deployment.environment
              from_attribute: environment
              action: upsert

        batch:
          timeout: 1s
          send_batch_size: 1024
          send_batch_max_size: 2048

      exporters:
        # Elasticsearch APM - Traces and Metrics
        otlp/elastic:
          endpoint: $${env:ELASTICSEARCH_APM_URL}
          headers:
            authorization: "ApiKey $${env:ELASTICSEARCH_API_KEY}"
          compression: gzip
          retry_on_failure:
            enabled: true
            initial_interval: 5s
            max_interval: 30s
            max_elapsed_time: 300s

        # Elasticsearch - Logs
        elasticsearch:
          endpoints:
            - $${env:ELASTICSEARCH_CLOUD_URL}
          api_key: $${env:ELASTICSEARCH_API_KEY}
          logs_index: "hospital-scraper-logs"
          tls:
            insecure: false

        # Debug logging (optional)
        debug:
          verbosity: basic
          sampling_initial: 5
          sampling_thereafter: 200

      service:
        pipelines:
          # Traces pipeline - to Elasticsearch APM
          traces:
            receivers: [otlp]
            processors: [memory_limiter, resource, batch]
            exporters: [otlp/elastic, debug]

          # Metrics pipeline - to Elasticsearch APM  
          metrics:
            receivers: [otlp]
            processors: [memory_limiter, resource, batch]
            exporters: [otlp/elastic, debug]

          # Logs pipeline - to Elasticsearch
          logs:
            receivers: [otlp]
            processors: [memory_limiter, resource, batch]
            exporters: [elasticsearch, debug]

        telemetry:
          logs:
            level: "info"

  filebeat-config-template:
    content: |
      filebeat.inputs:
      # Monitor Pino JSON log files
      # Note: pino-roll creates numbered files (hospital-scraper.1, .2, etc.)
      - type: log
        paths:
          - /app/logs/hospital-scraper*
        json.keys_under_root: true
        json.add_error_key: true
        fields:
          app: "hospital-scraper"
        processors:
          - timestamp:
              field: "@timestamp"
              layouts:
                - '2006-01-02T15:04:05.000Z'

      # Output to Elasticsearch Cloud
      output.elasticsearch:
        hosts: 
          - "$${ELASTICSEARCH_CLOUD_URL}"
        api_key: "DECODED_API_KEY_PLACEHOLDER"
        
      # Disable template setup to avoid conflicts with existing templates
      setup.template.enabled: false
      setup.ilm.enabled: false

      # Logging configuration
      logging.level: info
      logging.to_files: true
      logging.files:
        path: /var/log/filebeat
        name: filebeat
        keepfiles: 7
        permissions: 0644

      # Monitoring disabled for simplicity
      monitoring.enabled: false

volumes:
  hospital-logs:
    driver: local
    labels:
      - "com.dockge.name=Hospital Logs"
      - "com.dockge.description=Application and system logs"
  
  hospital-screenshots:
    driver: local
    labels:
      - "com.dockge.name=Hospital Screenshots"
      - "com.dockge.description=Browser screenshots for debugging"

  api-key-data:
    driver: local
    labels:
      - "com.dockge.name=API Key Data"
      - "com.dockge.description=Processed API key for Filebeat"

networks:
  hospital-network:
    driver: bridge
    labels:
      - "com.dockge.name=Hospital Network"
      - "com.dockge.description=Internal network for hospital scraper services"