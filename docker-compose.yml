version: '3.8'

services:
  # Main application
  hospital-scraper:
    build: .
    container_name: hospital-scraper-app
    restart: unless-stopped
    environment:
      # Database Configuration
      - DB_TYPE=elasticsearch
      - ELASTICSEARCH_CLOUD_URL=${ELASTICSEARCH_CLOUD_URL}
      - ELASTICSEARCH_API_KEY=${ELASTICSEARCH_API_KEY}
      - ELASTICSEARCH_INDEX=hospital-metrics
      
      # Grafana Cloud Configuration
      - GRAFANA_CLOUD_USER_ID=${GRAFANA_CLOUD_USER_ID}
      - GRAFANA_CLOUD_API_KEY=${GRAFANA_CLOUD_API_KEY}
      - GRAFANA_CLOUD_PROMETHEUS_URL=${GRAFANA_CLOUD_PROMETHEUS_URL}
      - GRAFANA_CLOUD_LOKI_URL=${GRAFANA_CLOUD_LOKI_URL}
      - GRAFANA_CLOUD_TEMPO_URL=${GRAFANA_CLOUD_TEMPO_URL}
      
      # OTEL Configuration
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=hospital-scraper
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_RESOURCE_ATTRIBUTES=service.name=hospital-scraper,service.version=1.0.0
      
      # Application Configuration
      - NODE_ENV=production
      - PORT=3000
      - SCRAPING_INTERVAL=30
      - TIMEZONE=Europe/Berlin
      - LOG_LEVEL=info
      
      # Scraper Configuration
      - TARGET_URL=https://www.vivantes.de/klinikum-im-friedrichshain/rettungsstelle
      - BROWSER_TYPE=chromium
      - HEADLESS=true
      - BROWSER_TIMEOUT=30000
      - MAX_RETRIES=3
      
      # Observability
      - OBSERVABILITY_PROVIDERS=elastic,grafana
    volumes:
      - ./logs:/app/logs
      - ./screenshots:/app/screenshots
    ports:
      - "3000:3000"
    depends_on:
      - otel-collector
    networks:
      - hospital-scraper-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: hospital-scraper-otel
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8889:8889"   # Prometheus metrics
    networks:
      - hospital-scraper-network
    environment:
      - ELASTICSEARCH_CLOUD_URL=${ELASTICSEARCH_CLOUD_URL}
      - ELASTICSEARCH_API_KEY=${ELASTICSEARCH_API_KEY}
      - GRAFANA_CLOUD_USER_ID=${GRAFANA_CLOUD_USER_ID}
      - GRAFANA_CLOUD_API_KEY=${GRAFANA_CLOUD_API_KEY}
      - GRAFANA_CLOUD_PROMETHEUS_URL=${GRAFANA_CLOUD_PROMETHEUS_URL}
      - GRAFANA_CLOUD_LOKI_URL=${GRAFANA_CLOUD_LOKI_URL}
      - GRAFANA_CLOUD_TEMPO_URL=${GRAFANA_CLOUD_TEMPO_URL}

  # Local Grafana for development (optional)
  grafana-local:
    image: grafana/grafana:latest
    container_name: hospital-scraper-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - hospital-scraper-network
    profiles:
      - dev

volumes:
  grafana-data:
    driver: local

networks:
  hospital-scraper-network:
    driver: bridge